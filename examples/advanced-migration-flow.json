[
    {
        "id": "advanced-flow",
        "label": "進階遷移流程",
        "info": "這個範例展示了完整的企業級資料庫遷移流程，包含錯誤處理、進度追蹤、資料驗證等功能。",
        "nodes": [
            {
                "id": "start-migration",
                "type": "inject",
                "z": "advanced-flow",
                "name": "開始進階遷移",
                "topic": "",
                "payload": "{\"migrationPlan\":[{\"source\":\"user_profiles\",\"target\":\"users\",\"priority\":1},{\"source\":\"product_catalog\",\"target\":\"products\",\"priority\":2},{\"source\":\"order_history\",\"target\":\"orders\",\"priority\":3}]}",
                "payloadType": "json",
                "repeat": "",
                "crontab": "",
                "once": false,
                "onceDelay": 0.1,
                "x": 160,
                "y": 80,
                "wires": [["migration-controller"]]
            },
            {
                "id": "migration-controller",
                "type": "function",
                "z": "advanced-flow",
                "name": "遷移控制器",
                "func": "// 初始化遷移狀態\ncontext.set('migrationStatus', {\n    total: msg.payload.migrationPlan.length,\n    completed: 0,\n    failed: 0,\n    currentIndex: 0\n});\n\n// 發送第一個表格進行遷移\nconst firstTable = msg.payload.migrationPlan[0];\nmsg.payload = {\n    sourceTable: firstTable.source,\n    targetTable: firstTable.target,\n    priority: firstTable.priority,\n    migrationPlan: msg.payload.migrationPlan\n};\n\nnode.status({fill:\"blue\",shape:\"dot\",text:`開始遷移: ${firstTable.source}`});\nreturn msg;",
                "outputs": 1,
                "noerr": 0,
                "x": 370,
                "y": 80,
                "wires": [["pre-migration-check"]]
            },
            {
                "id": "pre-migration-check",
                "type": "schema-bridge",
                "z": "advanced-flow",
                "name": "遷移前檢查",
                "sourceConnection": "oracle-conn",
                "targetConnection": "postgres-conn",
                "sourceTable": "",
                "targetTable": "",
                "operation": "analyze",
                "generateSql": true,
                "x": 580,
                "y": 80,
                "wires": [["validation-check", "schema-backup"]]
            },
            {
                "id": "schema-backup",
                "type": "function",
                "z": "advanced-flow",
                "name": "Schema 備份",
                "func": "// 備份原始 Schema\nconst backupData = {\n    timestamp: new Date().toISOString(),\n    sourceTable: msg.payload.sourceTable,\n    schema: msg.payload.schema,\n    metadata: msg.payload.metadata\n};\n\n// 儲存到 context（實際應用中可能儲存到檔案或資料庫）\ncontext.set(`backup_${msg.payload.sourceTable}`, backupData);\n\nnode.status({fill:\"green\",shape:\"dot\",text:`已備份: ${msg.payload.sourceTable}`});\nreturn msg;",
                "outputs": 1,
                "noerr": 0,
                "x": 780,
                "y": 140,
                "wires": [["backup-debug"]]
            },
            {
                "id": "backup-debug",
                "type": "debug",
                "z": "advanced-flow",
                "name": "備份記錄",
                "active": true,
                "tosidebar": true,
                "console": false,
                "tostatus": false,
                "complete": "payload.sourceTable",
                "targetType": "msg",
                "x": 980,
                "y": 140,
                "wires": []
            },
            {
                "id": "validation-check",
                "type": "function",
                "z": "advanced-flow",
                "name": "資料驗證",
                "func": "// 驗證 Schema 的完整性\nconst schema = msg.payload.schema;\nlet validationErrors = [];\n\n// 檢查必要欄位\nif (schema.length === 0) {\n    validationErrors.push('Schema 為空');\n}\n\n// 檢查主鍵\nconst hasPrimaryKey = schema.some(col => \n    col.name.toLowerCase().includes('id') || \n    col.name.toLowerCase().includes('key')\n);\nif (!hasPrimaryKey) {\n    validationErrors.push('未找到明確的主鍵欄位');\n}\n\n// 檢查資料型別對應\nschema.forEach(col => {\n    if (!col.mappedType) {\n        validationErrors.push(`欄位 ${col.name} 沒有對應的目標型別`);\n    }\n});\n\nmsg.validationResult = {\n    isValid: validationErrors.length === 0,\n    errors: validationErrors,\n    tableName: msg.payload.sourceTable\n};\n\nif (msg.validationResult.isValid) {\n    node.status({fill:\"green\",shape:\"dot\",text:`驗證通過: ${msg.payload.sourceTable}`});\n    return [msg, null];\n} else {\n    node.status({fill:\"red\",shape:\"dot\",text:`驗證失敗: ${validationErrors.length} 個錯誤`});\n    return [null, msg];\n}",
                "outputs": 2,
                "noerr": 0,
                "x": 780,
                "y": 80,
                "wires": [["execute-migration"], ["validation-error"]]
            },
            {
                "id": "validation-error",
                "type": "function",
                "z": "advanced-flow",
                "name": "處理驗證錯誤",
                "func": "node.error(`驗證失敗: ${msg.validationResult.errors.join(', ')}`, msg);\n\n// 記錄錯誤並繼續下一個表格\nconst status = context.get('migrationStatus');\nstatus.failed++;\nstatus.currentIndex++;\ncontext.set('migrationStatus', status);\n\n// 檢查是否還有更多表格需要處理\nif (status.currentIndex < msg.payload.migrationPlan.length) {\n    const nextTable = msg.payload.migrationPlan[status.currentIndex];\n    msg.payload = {\n        sourceTable: nextTable.source,\n        targetTable: nextTable.target,\n        priority: nextTable.priority,\n        migrationPlan: msg.payload.migrationPlan\n    };\n    return msg;\n}\n\nreturn null;",
                "outputs": 1,
                "noerr": 0,
                "x": 1000,
                "y": 40,
                "wires": [["pre-migration-check"]]
            },
            {
                "id": "execute-migration",
                "type": "schema-bridge",
                "z": "advanced-flow",
                "name": "執行遷移",
                "sourceConnection": "oracle-conn",
                "targetConnection": "postgres-conn",
                "sourceTable": "",
                "targetTable": "",
                "operation": "migrate",
                "generateSql": true,
                "executeSQL": true,
                "includeData": true,
                "batchSize": 1000,
                "x": 1000,
                "y": 80,
                "wires": [["migration-result"]]
            },
            {
                "id": "migration-result",
                "type": "function",
                "z": "advanced-flow",
                "name": "處理遷移結果",
                "func": "const status = context.get('migrationStatus');\n\nif (msg.payload.success) {\n    status.completed++;\n    node.status({fill:\"green\",shape:\"dot\",text:`完成: ${msg.payload.sourceTable} (${msg.payload.migratedRows} 筆)`});\n} else {\n    status.failed++;\n    node.error(`遷移失敗: ${msg.payload.sourceTable}`, msg);\n}\n\nstatus.currentIndex++;\ncontext.set('migrationStatus', status);\n\n// 更新整體進度\nconst progress = Math.round((status.currentIndex / status.total) * 100);\nmsg.migrationProgress = {\n    progress: progress,\n    completed: status.completed,\n    failed: status.failed,\n    total: status.total,\n    currentTable: msg.payload.targetTable\n};\n\n// 檢查是否還有更多表格需要處理\nif (status.currentIndex < msg.payload.migrationPlan.length) {\n    const nextTable = msg.payload.migrationPlan[status.currentIndex];\n    msg.payload.sourceTable = nextTable.source;\n    msg.payload.targetTable = nextTable.target;\n    msg.payload.priority = nextTable.priority;\n    \n    return [msg, msg]; // 輸出進度和下一個任務\n} else {\n    // 所有遷移完成\n    msg.finalReport = {\n        totalTables: status.total,\n        successful: status.completed,\n        failed: status.failed,\n        completionTime: new Date().toISOString(),\n        duration: Date.now() - (context.get('startTime') || Date.now())\n    };\n    \n    node.status({fill:\"blue\",shape:\"ring\",text:`遷移完成: ${status.completed}/${status.total}`});\n    return [null, msg]; // 只輸出最終報告\n}",
                "outputs": 2,
                "noerr": 0,
                "x": 1200,
                "y": 80,
                "wires": [["progress-delay"], ["final-report"]]
            },
            {
                "id": "progress-delay",
                "type": "delay",
                "z": "advanced-flow",
                "name": "進度間隔",
                "pauseType": "delay",
                "timeout": "2",
                "timeoutUnits": "seconds",
                "rate": "1",
                "nbRateUnits": "1",
                "rateUnits": "second",
                "randomFirst": "1",
                "randomLast": "5",
                "randomUnits": "seconds",
                "drop": false,
                "x": 1200,
                "y": 40,
                "wires": [["pre-migration-check"]]
            },
            {
                "id": "progress-monitor",
                "type": "debug",
                "z": "advanced-flow",
                "name": "進度監控",
                "active": true,
                "tosidebar": true,
                "console": false,
                "tostatus": false,
                "complete": "migrationProgress",
                "targetType": "msg",
                "x": 1400,
                "y": 40,
                "wires": []
            },
            {
                "id": "final-report",
                "type": "function",
                "z": "advanced-flow",
                "name": "生成最終報告",
                "func": "const report = msg.finalReport;\n\n// 生成詳細的遷移報告\nconst detailedReport = {\n    summary: {\n        totalTables: report.totalTables,\n        successfulMigrations: report.successful,\n        failedMigrations: report.failed,\n        successRate: Math.round((report.successful / report.totalTables) * 100),\n        duration: `${Math.round(report.duration / 1000)} 秒`\n    },\n    completedAt: report.completionTime,\n    backups: Object.keys(context.keys()).filter(key => key.startsWith('backup_')),\n    recommendation: report.failed > 0 ? \n        '建議檢查失敗的遷移並重新執行' : \n        '所有表格遷移成功完成'\n};\n\nmsg.payload = detailedReport;\nnode.status({fill:\"green\",shape:\"dot\",text:`報告已生成`});\n\nreturn msg;",
                "outputs": 1,
                "noerr": 0,
                "x": 1400,
                "y": 80,
                "wires": [["report-output", "email-notification"]]
            },
            {
                "id": "report-output",
                "type": "debug",
                "z": "advanced-flow",
                "name": "最終報告",
                "active": true,
                "tosidebar": true,
                "console": false,
                "tostatus": false,
                "complete": "payload",
                "targetType": "msg",
                "x": 1600,
                "y": 80,
                "wires": []
            },
            {
                "id": "email-notification",
                "type": "template",
                "z": "advanced-flow",
                "name": "郵件通知模板",
                "field": "emailContent",
                "fieldType": "msg",
                "format": "handlebars",
                "syntax": "mustache",
                "template": "資料庫遷移完成報告\n\n遷移摘要：\n- 總表格數量：{{payload.summary.totalTables}}\n- 成功遷移：{{payload.summary.successfulMigrations}}\n- 失敗遷移：{{payload.summary.failedMigrations}}\n- 成功率：{{payload.summary.successRate}}%\n- 總耗時：{{payload.summary.duration}}\n\n完成時間：{{payload.completedAt}}\n\n建議：{{payload.recommendation}}",
                "output": "str",
                "x": 1600,
                "y": 120,
                "wires": [["email-debug"]]
            },
            {
                "id": "email-debug",
                "type": "debug",
                "z": "advanced-flow",
                "name": "郵件內容",
                "active": true,
                "tosidebar": true,
                "console": false,
                "tostatus": false,
                "complete": "emailContent",
                "targetType": "msg",
                "x": 1800,
                "y": 120,
                "wires": []
            }
        ]
    },
    {
        "id": "oracle-conn",
        "type": "Schema Bridge Connection",
        "name": "Oracle 來源",
        "dbType": "oracle",
        "server": "oracle-server.company.com",
        "port": "1521",
        "database": "PRODDB",
        "oracleClientPath": "/opt/oracle/instantclient",
        "connectionTimeout": 30000,
        "requestTimeout": 60000,
        "connectionRetryInterval": 5000,
        "poolMin": 2,
        "poolMax": 20,
        "poolIdleTimeoutMillis": 60000
    },
    {
        "id": "postgres-conn",
        "type": "Schema Bridge Connection",
        "name": "PostgreSQL 目標",
        "dbType": "postgres",
        "server": "postgres-cluster.company.com",
        "port": "5432",
        "database": "migrated_db",
        "ssl": true,
        "connectionTimeout": 30000,
        "requestTimeout": 60000,
        "connectionRetryInterval": 5000,
        "poolMin": 5,
        "poolMax": 50,
        "poolIdleTimeoutMillis": 60000
    }
] 