[
    {
        "id": "custom-schema-flow",
        "label": "自訂 Schema 轉換範例",
        "info": "這個範例展示如何使用自訂 Schema 定義來進行精確的資料結構轉換，適用於複雜的業務需求。",
        "nodes": [
            {
                "id": "custom-schema-inject",
                "type": "inject",
                "z": "custom-schema-flow",
                "name": "載入自訂 Schema",
                "topic": "",
                "payload": "{}",
                "payloadType": "json",
                "repeat": "",
                "crontab": "",
                "once": false,
                "onceDelay": 0.1,
                "x": 160,
                "y": 80,
                "wires": [["schema-builder"]]
            },
            {
                "id": "schema-builder",
                "type": "function",
                "z": "custom-schema-flow",
                "name": "建立自訂 Schema",
                "func": "// 定義一個複雜的自訂 Schema\nconst customSchema = [\n    {\n        name: \"user_id\",\n        type: \"SERIAL PRIMARY KEY\",\n        nullable: false,\n        comment: \"用戶唯一識別碼\"\n    },\n    {\n        name: \"username\",\n        type: \"VARCHAR(50)\",\n        nullable: false,\n        defaultValue: null,\n        unique: true,\n        comment: \"用戶名稱（唯一）\"\n    },\n    {\n        name: \"email\",\n        type: \"VARCHAR(255)\",\n        nullable: false,\n        defaultValue: null,\n        unique: true,\n        validation: \"EMAIL_FORMAT\",\n        comment: \"電子郵件地址\"\n    },\n    {\n        name: \"full_name\",\n        type: \"VARCHAR(100)\",\n        nullable: true,\n        defaultValue: \"''\",\n        comment: \"用戶全名\"\n    },\n    {\n        name: \"birth_date\",\n        type: \"DATE\",\n        nullable: true,\n        comment: \"出生日期\"\n    },\n    {\n        name: \"salary\",\n        type: \"DECIMAL(12,2)\",\n        nullable: true,\n        defaultValue: \"0.00\",\n        comment: \"薪資（保留兩位小數）\"\n    },\n    {\n        name: \"department_id\",\n        type: \"INTEGER\",\n        nullable: true,\n        foreignKey: {\n            table: \"departments\",\n            column: \"id\",\n            onDelete: \"SET NULL\",\n            onUpdate: \"CASCADE\"\n        },\n        comment: \"部門 ID（外鍵）\"\n    },\n    {\n        name: \"hire_date\",\n        type: \"TIMESTAMP\",\n        nullable: false,\n        defaultValue: \"CURRENT_TIMESTAMP\",\n        comment: \"雇用日期\"\n    },\n    {\n        name: \"is_active\",\n        type: \"BOOLEAN\",\n        nullable: false,\n        defaultValue: \"true\",\n        comment: \"帳戶狀態\"\n    },\n    {\n        name: \"metadata\",\n        type: \"JSONB\",\n        nullable: true,\n        comment: \"額外的用戶元數據（JSON 格式）\"\n    },\n    {\n        name: \"created_at\",\n        type: \"TIMESTAMP\",\n        nullable: false,\n        defaultValue: \"CURRENT_TIMESTAMP\",\n        comment: \"記錄建立時間\"\n    },\n    {\n        name: \"updated_at\",\n        type: \"TIMESTAMP\",\n        nullable: false,\n        defaultValue: \"CURRENT_TIMESTAMP\",\n        onUpdate: \"CURRENT_TIMESTAMP\",\n        comment: \"記錄更新時間\"\n    }\n];\n\nmsg.payload = {\n    operation: \"convert\",\n    sourceTable: \"legacy_users\",\n    targetTable: \"users\",\n    sourceDbType: \"mysql\",\n    targetDbType: \"postgres\",\n    schema: customSchema,\n    options: {\n        addIndexes: true,\n        addConstraints: true,\n        addComments: true\n    }\n};\n\nnode.status({fill:\"blue\",shape:\"dot\",text:`Schema 已建立 (${customSchema.length} 個欄位)`});\nreturn msg;",
                "outputs": 1,
                "noerr": 0,\n                "x": 360,\n                "y": 80,\n                "wires": [["convert-custom-schema"]]\n            },\n            {\n                "id": "convert-custom-schema",\n                "type": "schema-bridge",\n                "z": "custom-schema-flow",\n                "name": "轉換自訂 Schema",\n                "sourceConnection": "",\n                "targetConnection": "",\n                "sourceTable": "",\n                "targetTable": "",\n                "operation": "convert",\n                "generateSql": true,\n                "customSchema": "",\n                "x": 570,\n                "y": 80,\n                "wires": [["enhance-sql", "validate-schema"]]\n            },\n            {\n                "id": "enhance-sql",\n                "type": "function",\n                "z": "custom-schema-flow",\n                "name": "增強 SQL 語句",\n                "func": "// 在基本的 CREATE TABLE 語句基礎上增加索引、約束等\nlet enhancedSQL = msg.payload.sql;\nconst schema = msg.payload.schema;\nconst tableName = msg.payload.targetTable;\n\n// 添加索引\nif (msg.payload.options && msg.payload.options.addIndexes) {\n    const indexes = [];\n    \n    schema.forEach(column => {\n        if (column.unique) {\n            indexes.push(`CREATE UNIQUE INDEX idx_${tableName}_${column.name} ON ${tableName} (${column.name});`);\n        }\n        if (column.foreignKey) {\n            indexes.push(`CREATE INDEX idx_${tableName}_${column.name}_fk ON ${tableName} (${column.name});`);\n        }\n    });\n    \n    if (indexes.length > 0) {\n        enhancedSQL += '\\n\\n-- 索引\\n' + indexes.join('\\n');\n    }\n}\n\n// 添加外鍵約束\nif (msg.payload.options && msg.payload.options.addConstraints) {\n    const constraints = [];\n    \n    schema.forEach(column => {\n        if (column.foreignKey) {\n            const fk = column.foreignKey;\n            constraints.push(\n                `ALTER TABLE ${tableName} ADD CONSTRAINT fk_${tableName}_${column.name} ` +\n                `FOREIGN KEY (${column.name}) REFERENCES ${fk.table}(${fk.column}) ` +\n                `ON DELETE ${fk.onDelete} ON UPDATE ${fk.onUpdate};`\n            );\n        }\n    });\n    \n    if (constraints.length > 0) {\n        enhancedSQL += '\\n\\n-- 外鍵約束\\n' + constraints.join('\\n');\n    }\n}\n\n// 添加註釋\nif (msg.payload.options && msg.payload.options.addComments) {\n    const comments = [];\n    \n    schema.forEach(column => {\n        if (column.comment) {\n            comments.push(`COMMENT ON COLUMN ${tableName}.${column.name} IS '${column.comment}';`);\n        }\n    });\n    \n    if (comments.length > 0) {\n        enhancedSQL += '\\n\\n-- 欄位註釋\\n' + comments.join('\\n');\n    }\n}\n\nmsg.enhancedSQL = enhancedSQL;\nnode.status({fill:\"green\",shape:\"dot\",text:\"SQL 語句已增強\"});\n\nreturn msg;",\n                "outputs": 1,\n                "noerr": 0,\n                "x": 770,\n                "y": 80,\n                "wires": [["sql-output"]]\n            },\n            {\n                "id": "validate-schema",\n                "type": "function",\n                "z": "custom-schema-flow",\n                "name": "驗證 Schema",\n                "func": "const schema = msg.payload.schema;\nconst validationResults = {\n    isValid: true,\n    warnings: [],\n    errors: [],\n    suggestions: []\n};\n\n// 檢查主鍵\nconst primaryKeys = schema.filter(col => col.type.includes('PRIMARY KEY'));\nif (primaryKeys.length === 0) {\n    validationResults.warnings.push('未定義主鍵');\n} else if (primaryKeys.length > 1) {\n    validationResults.errors.push('定義了多個主鍵');\n    validationResults.isValid = false;\n}\n\n// 檢查欄位名稱規範\nschema.forEach(column => {\n    if (!/^[a-z][a-z0-9_]*$/.test(column.name)) {\n        validationResults.warnings.push(`欄位名稱 '${column.name}' 不符合命名規範`);\n    }\n    \n    if (column.name.length > 63) {\n        validationResults.errors.push(`欄位名稱 '${column.name}' 超過 PostgreSQL 限制 (63 字元)`);\n        validationResults.isValid = false;\n    }\n});\n\n// 檢查資料型別\nconst supportedTypes = ['INTEGER', 'BIGINT', 'SERIAL', 'VARCHAR', 'TEXT', 'DATE', 'TIMESTAMP', 'BOOLEAN', 'DECIMAL', 'JSONB'];\nschema.forEach(column => {\n    const baseType = column.type.split('(')[0].split(' ')[0];\n    if (!supportedTypes.includes(baseType)) {\n        validationResults.warnings.push(`欄位 '${column.name}' 使用了可能不支援的型別: ${baseType}`);\n    }\n});\n\n// 建議\nif (schema.filter(col => col.name.includes('created_at')).length === 0) {\n    validationResults.suggestions.push('建議添加 created_at 欄位以追蹤記錄建立時間');\n}\n\nif (schema.filter(col => col.name.includes('updated_at')).length === 0) {\n    validationResults.suggestions.push('建議添加 updated_at 欄位以追蹤記錄更新時間');\n}\n\nmsg.validation = validationResults;\n\nif (validationResults.isValid) {\n    node.status({fill:\"green\",shape:\"dot\",text:`驗證通過 (${validationResults.warnings.length} 個警告)"`});\n} else {\n    node.status({fill:\"red\",shape:\"dot\",text:`驗證失敗 (${validationResults.errors.length} 個錯誤)"`});\n}\n\nreturn msg;",\n                "outputs": 1,\n                "noerr": 0,\n                "x": 770,\n                "y": 140,\n                "wires": [["validation-output"]]\n            },\n            {\n                "id": "sql-output",\n                "type": "debug",\n                "z": "custom-schema-flow",\n                "name": "增強版 SQL",\n                "active": true,\n                "tosidebar": true,\n                "console": false,\n                "tostatus": false,\n                "complete": "enhancedSQL",\n                "targetType": "msg",\n                "x": 980,\n                "y": 80,\n                "wires": []\n            },\n            {\n                "id": "validation-output",\n                "type": "debug",\n                "z": "custom-schema-flow",\n                "name": "驗證結果",\n                "active": true,\n                "tosidebar": true,\n                "console": false,\n                "tostatus": false,\n                "complete": "validation",\n                "targetType": "msg",\n                "x": 980,\n                "y": 140,\n                "wires": []\n            },\n            {\n                "id": "schema-template-inject",\n                "type": "inject",\n                "z": "custom-schema-flow",\n                "name": "載入模板 Schema",\n                "topic": "",\n                "payload": "e-commerce",\n                "payloadType": "str",\n                "repeat": "",\n                "crontab": "",\n                "once": false,\n                "onceDelay": 0.1,\n                "x": 160,\n                "y": 220,\n                "wires": [["template-loader"]]\n            },\n            {\n                "id": "template-loader",\n                "type": "function",\n                "z": "custom-schema-flow",\n                "name": "Schema 模板載入器",\n                "func": "const templates = {\n    'e-commerce': {\n        products: [\n            { name: 'product_id', type: 'SERIAL PRIMARY KEY', nullable: false },\n            { name: 'sku', type: 'VARCHAR(50)', nullable: false, unique: true },\n            { name: 'name', type: 'VARCHAR(255)', nullable: false },\n            { name: 'description', type: 'TEXT', nullable: true },\n            { name: 'price', type: 'DECIMAL(10,2)', nullable: false },\n            { name: 'category_id', type: 'INTEGER', nullable: true },\n            { name: 'inventory_count', type: 'INTEGER', nullable: false, defaultValue: '0' },\n            { name: 'is_active', type: 'BOOLEAN', nullable: false, defaultValue: 'true' },\n            { name: 'created_at', type: 'TIMESTAMP', nullable: false, defaultValue: 'CURRENT_TIMESTAMP' }\n        ],\n        orders: [\n            { name: 'order_id', type: 'SERIAL PRIMARY KEY', nullable: false },\n            { name: 'customer_id', type: 'INTEGER', nullable: false },\n            { name: 'order_date', type: 'TIMESTAMP', nullable: false, defaultValue: 'CURRENT_TIMESTAMP' },\n            { name: 'total_amount', type: 'DECIMAL(12,2)', nullable: false },\n            { name: 'status', type: 'VARCHAR(20)', nullable: false, defaultValue: \"'pending'\" },\n            { name: 'shipping_address', type: 'TEXT', nullable: true },\n            { name: 'payment_method', type: 'VARCHAR(50)', nullable: true }\n        ]\n    },\n    'crm': {\n        customers: [\n            { name: 'customer_id', type: 'SERIAL PRIMARY KEY', nullable: false },\n            { name: 'first_name', type: 'VARCHAR(50)', nullable: false },\n            { name: 'last_name', type: 'VARCHAR(50)', nullable: false },\n            { name: 'email', type: 'VARCHAR(255)', nullable: false, unique: true },\n            { name: 'phone', type: 'VARCHAR(20)', nullable: true },\n            { name: 'company_id', type: 'INTEGER', nullable: true },\n            { name: 'lead_source', type: 'VARCHAR(50)', nullable: true },\n            { name: 'status', type: 'VARCHAR(20)', nullable: false, defaultValue: \"'active'\" },\n            { name: 'created_at', type: 'TIMESTAMP', nullable: false, defaultValue: 'CURRENT_TIMESTAMP' }\n        ]\n    }\n};\n\nconst templateType = msg.payload;\nconst template = templates[templateType];\n\nif (!template) {\n    node.error(`未知的模板類型: ${templateType}`);\n    return null;\n}\n\nmsg.payload = {\n    templateType: templateType,\n    availableTables: Object.keys(template),\n    schemas: template\n};\n\nnode.status({fill:\"blue\",shape:\"dot\",text:`已載入 ${templateType} 模板`});\nreturn msg;",\n                "outputs": 1,\n                "noerr": 0,\n                "x": 380,\n                "y": 220,\n                "wires": [["template-output"]]\n            },\n            {\n                "id": "template-output",\n                "type": "debug",\n                "z": "custom-schema-flow",\n                "name": "模板 Schema",\n                "active": true,\n                "tosidebar": true,\n                "console": false,\n                "tostatus": false,\n                "complete": "payload",\n                "targetType": "msg",\n                "x": 590,\n                "y": 220,\n                "wires": []\n            }\n        ]\n    }\n] 